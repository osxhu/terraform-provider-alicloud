name: Terraform Basic Checks
triggers:
  merge_request:
    target-branches:
      - master
    paths:
      - '.aoneci/acctest-terraform-basic.yml'
      - 'alicloud/*.go'
  push:
    paths:
      - '.aoneci/acctest-terraform-basic.yml'
      - 'alicloud/*.go'
jobs:
  BreakingChange:
    steps:
      - name: Setup Go
        uses: setup-env
        inputs:
          go-version: '1.22.0'
      - uses: checkout
        inputs:
          # Checkout as many commits as needed for the diff
          fetch-depth: '2'
      - name: Attribute Breaking Change Check
        run: |
          git diff HEAD^ HEAD > diff.out
          go run scripts/compatibility/breaking_change_check.go -fileNames="diff.out"
  Consistency:
    steps:
      - name: Setup Go
        uses: setup-env
        inputs:
          go-version: '1.22.0'
      - uses: checkout
        inputs:
          # Checkout as many commits as needed for the diff
          fetch-depth: '2'
      - name: Attribute Consistency Check
        run: |
          git diff HEAD^ HEAD > diff.out
          go run scripts/consistency/consistency_check.go -fileNames="diff.out"
  Formatter:
    steps:
      - name: Setup Go
        uses: setup-env
        inputs:
          go-version: '1.22.0'
      - uses: checkout
        inputs:
          # Checkout as many commits as needed for the diff
          fetch-depth: '2'
      - name: Get dependencies
        run: |
          go install golang.org/x/tools/cmd/goimports@v0.24.0
          go mod tidy
      - name: Golang Formatter Check
        run: |
          if [[ $(git diff --name-only HEAD^ HEAD | grep -c "^alicloud/") -lt 1 ]]; then
            echo -e "\033[33m[WARNING]\033[0m there are no go files were changed, skipped."
            exit 0
          fi
          exitCode=0
          echo "==> Checking that code complies with gofmt and goimports requirements..."
          diffFiles=$(git diff --name-only HEAD^ HEAD | grep "^alicloud/")
          for fileName in ${diffFiles[@]};
          do
              if [[ ! -f ${filename} ]]; then
                  continue
              fi
              goimpFile=$(goimports -l ${fileName})
              if [[ -n ${goimpFile} ]]; then
                goimports -d ${fileName}
                exitCode=1
              fi
              gofmtFile=$(gofmt -l ${fileName})
              if [[ -n ${gofmtFile} ]]; then
                gofmt -d ${fileName}
                exitCode=1
              fi
          done
          if [[ ${exitCode} -gt 0 ]]; then
              echo -e "\n\033[31m[Error]\033[0m==> gofmt or goimports needs running on the above files. You can use the command: \`make fmt\` to reformat code. \033[0m"
              exit 1
          fi
          echo -e "==> PASS"
  Compile:
    steps:
      - name: Setup Go
        uses: setup-env
        inputs:
          go-version: '1.22.0'
      - uses: checkout
        inputs:
          # Checkout as many commits as needed for the diff
          fetch-depth: '2'
      - name: vet
        run: |
          make vet